package Package15;

import java.util.Arrays;

/*Array
    1、Java语言中的数组是一种引用数据类型。不属于基本数据类型。数组的父类是Object。
    2、数组实际上是一个容器，可以同时容纳多个元素。(数组是一个数据的集合。)
        数组 : 字面意思是“一组数据“
    3、数组当中可以存储“基本数据类型”的数据，也可以存储“引用数据类型”的数据
    4、数组因为是引用类型，所以数组对象在堆内存当中。
    5、数组当中如果存储的是“java对象”的话，实际上存储的是对象的“引用(内存地址)”
    6、数组一旦创建，在java中规定，长度不可变。
    7、数组的分类：一维数组、二维数组、三维数组、多维数组（一维数组使用较多，偶尔使用二维数组）
    8、所有数组均包含length属性，java自带
    9、java中数组要求元素类型统一，比如int类型数组只能存储int类型
    10、数组在内存方面存储的时候，数组中的元素内存地址(存储的每一个元素都是有规则的挨青排列的)是连续的。
        内存地址连续是数组存储元素的特点(特色)。数组实际上是一种简单的数据结构
    11、所有的数组都是”第一个小方框的内存地”作为整个数组象的内存地址
        (数组中首元素的内存地址作为整个数组对象的内存地址。)
    12、数组中每一个元素都是有下标的，下标从0开始，以1递增。最后一个元素的下标是:Length - 1
        下标非常重要，因为我们对数组中元素进行“存取”的时候，都需要通过下标来进行。
    13、数组这种数据结构的优点和缺点是什么?
        优点:
            查询/查找/检索某个下标上的元素时效率极高。可以说是查询效率最高的一个数据结构
                为什么检索效率高？
                    第一:每一个元素的内存地址在空间存储上是连续的。
                    第二：每一个元素类型相同，所以占用空间大小一样
                    第三：知道第一个元素内存地址，知道每一个元素占用空间的大小，又知道下标，
                            所以通过一个数学表达式就可以计算出某个下标上元素的内存地址。
                            直接通过内存地址定位元素，所以数组的检索效率是最高的。
            数组中存储100个元素，或者存储100万个元素，
            在元素查询/检索方面，效率是相同的
            因为数组中元素查找的时候不会一个一个找，
            是通过数学表达式计算出来的。(算出一个内存地址，直接定位的。 )
        缺点：第一:由于为了保证数组中每个元素的内存地址连续，所以在数组上随机删除或者增加元素的时候效率较低，
                因为随机增删元素会涉及到后面元素统一向前或者向后位移的操作。
             第二:数组不能存储大数据量，为什么?
                因为很难在内存空闻上龙到一块特别大的连续的内存空间

             注意：数组最后一个元素的增删不受影响，因为后面没有其他元素了

 */
public class ArrayTest {
    int[] ints = new int[5];
    int[] ints1 = new int[]{1, 2, 3, 4, 5};

    public static void main(String[] args) {
        //Run（运行）-> Edit Configurations...（编辑配置...) -> Programs Arguments（程序实参） 中可以添加args参数
        //例如：添加abc dsf qqq，JVM在调用main方法的时候就会传递数组：String[]{"abc", "dsf", "qqq"}
        System.out.println(Arrays.toString(args));
    }
}
